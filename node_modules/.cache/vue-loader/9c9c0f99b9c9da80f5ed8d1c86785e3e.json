{"remainingRequest":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/src/views/Generate.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/src/views/Generate.vue","mtime":1574876976291},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5kaXNhYmxlZFRhYnsKICAgIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Cg=="},{"version":3,"sources":["Generate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAycA;AACA;AACA","file":"Generate.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"md-6 mt-2\">\n        <h1 class=\"text-center\">Generate an Exam</h1>\n        <b-alert \n            variant=\"danger\" dismissible\n            :show=\"dismissCountDownSelect\"\n            @dismissed=\"dismissCountDownSelect=0\"\n            @dismiss-count-down=\"countDownChanged\" \n        >\n            You must select at lest one problem for your exam!\n        </b-alert>\n        <b-alert v-model=\"richMaximunProblem\" variant=\"warning\" dismissible>\n            You can select eight problem as maximum for your exam!\n        </b-alert>\n        <b-button squared size=\"sm\" variant=\"light\" class=\"w-50\" @click=\"tabIndex--\"><i class=\"fas fa-angle-double-left fa-1x\" style=\"color:  #2f3135 ;\"></i></b-button>\n            <b-button class=\"w-50\" squared size=\"sm\" variant=\"light\" @click=\"goNext\"><i class=\"fas fa-angle-double-right fa-1x\" style=\"color:  #2f3135 ;\"></i></b-button> \n            <b-progress height=\"2px\" :value=\"tabIndex+1\" :max=3></b-progress>\n        <b-tabs content-class=\"mt-3\" v-model=\"tabIndex\" align=\"center\" fill justified>\n            <b-tab title=\"Select Problems\" title-item-class=\"disabledTab\">\n                <b-container class=\"mb-2\" style=\"max-width: 600px;  min-height: 400px;\"> \n                    <b-form-input class=\"w-100\" placeholder=\"Search a problem for your exam\" type=\"text\" v-model=\"problemQuery\"></b-form-input>\n                    <!--Card for problems-->\n                    <b-card class=\"mt-2 shadow-sm\" v-for=\"(problem, index) of filtrarAll\" :key = \"index\" >\n                        <b-card-title>{{problem.title}}</b-card-title>\n                        <b-card-sub-title><small><strong>Tags: </strong></small><small v-for=\"(tag, index) of problem.topicsString\" :key=\"index\"> | {{tag}}</small></b-card-sub-title>\n                        <b-button squared size=\"sm\" variant=\"light\" class=\"mt-2 float-md-left\" @click=\"selectProblem(index)\">Select</b-button>\n                        <b-button squared size=\"sm\" variant=\"light\" class=\"mt-2 float-md-left\" @click=\"visualizeModal(problem.body);$bvModal.show('problemVisualizador');\">View</b-button>\n                        <b-card-text><small class=\"float-right\">{{dicty[problem.type]}}</small></b-card-text>\n                    </b-card>\n                </b-container>\n                \n                \n            </b-tab>\n            <b-tab title=\"Exam Details\" title-item-class=\"disabledTab\">\n                <b-container class=\"mb-2\" style=\"max-width: 600px;\">\n                    <small><font color=\"red\">Obligatory *</font> </small>\n                    <b-form>\n                    <b-form-group label = \"Title: *\">\n                        <b-form-input\n                        v-model=\"$v.exam.title.$model\"\n                        placeholder=\"Title\"\n                        :state= \"$v.exam.title.$dirty ? !$v.exam.title.$error : null\"\n                        aria-describedby=\"input-1-live-feedback\"\n                        >\n                        </b-form-input>\n                        <b-form-invalid-feedback id=\"input-1-live-feedback\">\n                            You must need to enter your exam title.\n                        </b-form-invalid-feedback>\n                        <b-alert \n                            :show=\"dismissCountDownTitle\"\n                            @dismissed=\"dismissCountDownTitle=0\"\n                            @dismiss-count-down=\"countDownChanged\"  \n                            variant=\"danger\" dismissible>\n                            You must enter the title for your exam!\n                        </b-alert>\n                    </b-form-group>\n                    <b-form-group label=\"Indications: *\">\n                        <b-form-textarea\n                        v-model=\"$v.exam.indications.$model\"\n                        :state= \"$v.exam.indications.$dirty ? !$v.exam.indications.$error : null\"\n                        placeholder=\"Indications\"\n                        rows=\"6\"\n                        aria-describedby=\"input-2-live-feedback\"\n                        >\n                        </b-form-textarea>\n                        <b-form-invalid-feedback id=\"input-2-live-feedback\">\n                            You must need to enter your exam indications.\n                        </b-form-invalid-feedback>\n                        <b-alert \n                            :show=\"dismissCountDownIndications\"\n                            @dismissed=\"dismissCountDownIndications=0\"\n                            @dismiss-count-down=\"countDownChanged\" \n                        variant=\"danger\" dismissible>\n                            You must enter the indications for your exam!\n                        </b-alert>\n                    </b-form-group>\n                    <b-row>\n                        <b-col cols=\"6\">\n                            Duration: *\n                            <b-form-input v-model=\"$v.exam.duration.$model\"\n                            :state= \"$v.exam.duration.$dirty ? !$v.exam.duration.$error : null\"\n                            aria-describedby=\"input-3-live-feedback\"\n                            >\n                            </b-form-input>\n                            <b-form-invalid-feedback id=\"input-3-live-feedback\">\n                            You must need to enter your exam details.\n                            </b-form-invalid-feedback>\n                            <b-alert \n                                :show=\"dismissCountDownDuration\"\n                                @dismissed=\"dismissCountDownDuration=0\"\n                                @dismiss-count-down=\"countDownChanged\" \n                                variant=\"danger\" dismissible>\n                                You must enter the title for your exam!\n                            </b-alert>   \n                        </b-col>\n                        <b-col cols=\"6\">\n                            Course:*\n                            <b-form-input v-model=\"$v.exam.course.$model\"\n                            :state= \"$v.exam.course.$dirty ? !$v.exam.course.$error : null\"\n                            aria-describedby=\"input-4-live-feedback\"\n                            >\n                            </b-form-input>\n                            <b-form-invalid-feedback id=\"input-4-live-feedback\">\n                            You must need to enter your exam details.\n                            </b-form-invalid-feedback>\n                            <b-alert \n                                :show=\"dismissCountDownCourse\"\n                                @dismissed=\"dismissCountDownCourse=0\"\n                                @dismiss-count-down=\"countDownChanged\" \n                                variant=\"danger\" dismissible>\n                                You must enter the course for your exam!\n                            </b-alert> \n                        </b-col>\n                    </b-row>\n                    <b-form-group label = \"Add your problems score:\" class=\"mt-2\">\n\n                        <b-alert show><small>NOTE: Press 'enter' after writing a note</small></b-alert>\n\n                    <b-container fluid>\n                        <!-- Main table element -->\n                        <b-table\n                        show-empty\n                        small\n                        stacked=\"md\"\n                        :items=\"problemsSelected\"\n                        :fields=\"fields\"      \n                        >\n                        \n                        <template v-slot:cell(type)=\"row\">\n                            {{ dicty[row.value] }}\n                        </template>\n                        <template v-slot:cell(deselect)=\"row\">\n                            <b-button-close squared size=\"sm\" variant=\"light\" class=\"mt-2 float-md-right\" @click=\"deselectProblem(row.index)\"></b-button-close>\n                        </template>\n\n                        <template v-slot:cell(points)=\"row\">\n                            <input style=\"width: 30px;\" v-model=\"row.value\" v-on:keyup.enter=\"updateScore(row.index, row.value)\" placeholder=\"edit me\">\n                        </template>\n\n                        \n                        <template v-slot:cell(problem)=\"row\">\n                            <b-button variant=\"light\" size=\"sm\" @click=\"row.toggleDetails\">\n                            {{ row.detailsShowing ? 'Hide' : 'Show' }} Problem\n                            </b-button>\n                        </template>\n\n                        <template v-slot:row-details=\"row\">\n                            <b-card>\n                                <b-card-body v-html=\"visualizeCard(row.item.body)\">\n                                </b-card-body>\n                            </b-card>\n                        </template>\n                        </b-table>\n\n                    </b-container>\n                    </b-form-group>\n                </b-form>\n                    \n                </b-container>\n            </b-tab>\n            <b-tab title=\"Exam Preview\"  title-item-class=\"disabledTab\">\n                <b-card class=\"text-center\">\n                    Your exam was successfully generated! You can download the pdf or source code below:\n                </b-card>\n                <b-container style=\"height: 400px; max-height: 600px;\" class=\"text-center\">\n                <b-button style =\"position: relative; top: 50%; transform: translateY(-50%);\" variant=\"light\" @click=\"downloadGenerateExam\">Download Exam</b-button>\n                <b-button style =\"position: relative; top: 50%; transform: translateY(-50%);\" variant=\"light\" @click=\"downloadGenerateExamLatex\">Download Source Code</b-button>    \n                </b-container>\n                \n            </b-tab>\n            \n            \n        </b-tabs>\n\n        <!--Modal Visualizador-->\n            <b-modal title=\"Problem Vizualizador\" id=\"problemVisualizador\" ok-only>\n            <b-card-body v-html=\"problem_html\"></b-card-body>\n            </b-modal>\n        <!--Modal Submit Confirmation-->\n        <b-modal \n                title=\"Submit status\"\n                id=\"examSubmitModal\"\n                ok-only\n            >\n            Are you sure you want to submit this exam?\n            <template v-slot:modal-footer>\n                <b-button\n                    variant=\"primary\"\n                    size=\"sm\"\n                    class=\"float-right\"\n                    type=\"submit\"\n                    @click=\"submitExam($event.target)\"\n                >\n                Yes\n                </b-button>\n                <b-button\n                    variant=\"danger\"\n                    size=\"sm\"\n                    class=\"float-left\"\n                    @click=\"hideInfo($event.target)\"\n                >\n                Cancel\n                </b-button>\n            </template>\n            </b-modal>\n    </div>\n</template>\n<script>\nimport { minLength, required } from 'vuelidate/lib/validators'\nimport {mapState} from 'vuex'\nimport { validationMixin } from 'vuelidate'\nimport { parse, HtmlGenerator } from 'latex.js'\nimport katex from 'katex';\nimport 'katex/dist/katex.min.css';\nimport axios from 'axios'\nexport default {\n    mixins: [validationMixin],\n    data(){\n        return {\n            dismissSecs: 5,\n            dismissCountDownDuration: 0,\n            dismissCountDownCourse: 0,\n            dismissCountDownIndications: 0,\n            dismissCountDownSelect: 0,\n            dismissCountDownTitle: 0,\n            tabIndex : 0,\n            problemList: [],\n            problemsSelected : [],\n            problemQuery: '',\n            idxExamGenerated: '',\n            richMaximunProblem: false,\n            maxNumberProblems: 8,\n            problem_html: '',\n            pdfGeneratedURL: '',\n            latexGeneratedURL: '',\n            dicty : {'SA' : 'Short Answer', 'LA' : 'Long Answer', 'MC' : 'Multiple Choice' , 'TF' : 'True or False'},\n            fields: [\n                {key: 'title', label:'Title'},\n                {key: 'type', label: 'Type'},\n                {key: 'points', label: 'Score'},\n                {key: 'problem', label: 'Problem'},\n                {key: 'deselect', label: 'Deselect'}\n            ]\n        }\n    },\n    beforeMount(){\n        let linkProblemsSelected = 'http://' + this.$store.state.clientURL + '/problem/v1/problem/getProblemsSubmitedByUser?idUser=' + this.$store.state.user.id\n        let linkProblemsSubmited = 'http://' + this.$store.state.clientURL + '/problem/v1/problem/getProblemsSelected?id=' + this.$store.state.user.id\n\n        const requestSelected = axios.get(linkProblemsSelected);\n        const requestSubmited = axios.get(linkProblemsSubmited);\n\n        axios.all([requestSelected, requestSubmited]).then(axios.spread((...responses) => {\n        const responseSelected = responses[0];\n        const responseSubmited = responses[1];\n        this.problemList = responseSelected.data.concat(responseSubmited.data)\n        })).catch(errors => {\n        console.error(errors);\n        })\n\n    },\n    mounted() {\n        window.katex = katex;      \n    },\n    computed: {\n        \n        ...mapState ({\n            exam: state=>state.exam,\n            user: state=>state.user,\n            //problemsSelected : state=>state.problemsSelected,\n            //problemsAll : state=>state.myProblems\n        }),\n        filtrarAll() {\n            let result = []\n            for (let problem of this.problemList) {\n                problem[\"points\"] = 0\n                if (this.problemQuery ===''){\n                    result.push(problem);\n                }else{\n                    let titleCond = problem.title.toLowerCase().indexOf(this.problemQuery.toLowerCase()) >= 0;\n                    let bodyCond = problem.body.toLowerCase().indexOf(this.problemQuery.toLowerCase()) >= 0;\n                    if (titleCond || bodyCond){\n                        result.push (problem)\n                    }\n                }\n            }\n            return result\n            \n        },\n    },\n\n    methods: {\n        hideInfo(button){\n            this.$root.$emit('bv::hide::modal', 'examSubmitModal', button)\n        },\n        visualizeCard(body){\n            let generator = new HtmlGenerator({ hyphenate: false })\n            let doc = parse(body, { generator: generator })\n            return doc.htmlDocument().documentElement.outerHTML\n        },\n        visualizeModal(body){\n            let generator = new HtmlGenerator({ hyphenate: false })\n            let doc = parse(body, { generator: generator })\n            this.problem_html = doc.htmlDocument().documentElement.outerHTML;\n        },\n        submitExam(evt){\n\n            const p_post = axios.post('http://' + this.$store.state.clientURL +'/exam/v1/submitExam', {\n                idTeacher: this.user.id,\n                title: this.exam.title,\n                course: this.exam.course,\n                listProblems: this.problemsSelected,\n                duration: this.exam.duration,\n                indications: this.exam.indications\n            });\n            p_post.then(resp => {\n                console.log(resp.data)\n                this.idxExamGenerated = resp.data.result\n                this.exam.title = '',\n                this.exam.course = '',\n                this.problemList = this.problemList.concat(this.problemsSelected),\n                this.problemsSelected = [],\n                this.exam.duration = '',\n                this.exam.indications = '',\n                this.showGenerateExam()       \n            });\n            p_post.catch(error => {\n                console.error(error)\n            });\n            this.hideInfo(evt);\n            this.tabIndex++;\n        },\n        showGenerateExam(){\n            axios({\n                url: 'http://' + this.$store.state.clientURL +'/exam/v1/generateExam?idExam='+this.idxExamGenerated+'&idTeacher='+this.user.id,\n                method: 'GET',\n                responseType: 'blob',\n            }).then((response) => {\n                let newBlob = new Blob([response.data], {type: \"application/pdf\"})        \n                this.pdfGeneratedURL = URL.createObjectURL(newBlob);\n                window.open(this.pdfGeneratedURL)\n            });\n        },\n        downloadGenerateExamLatex(){\n            axios({\n                url: 'http://' + this.$store.state.clientURL +'/exam/v1/generateExamLatex?idExam='+this.idxExamGenerated+'&idTeacher='+this.user.id,\n                method: 'GET',\n                responseType: 'blob',\n            }).then((response) => {\n                let newBlob = new Blob([response.data], {type: \"application/tex\"})        \n                this.latexGeneratedURL = URL.createObjectURL(newBlob);\n                var fileLink = document.createElement('a');\n                fileLink.href = this.latexGeneratedURL;\n                fileLink.setAttribute('download', 'easyExam.tex');\n                document.body.appendChild(fileLink)\n                fileLink.click();\n            });\n        },\n        downloadGenerateExam(){\n            var fileLink = document.createElement('a');\n            fileLink.href = this.pdfGeneratedURL;\n            fileLink.setAttribute('download', 'easyExam.pdf');\n            document.body.appendChild(fileLink)\n            fileLink.click();\n        },\n        goNext(){\n            switch(this.tabIndex){\n                case 0:{\n                    if (this.problemsSelected.length >= 1){\n                        this.tabIndex++;\n                    }else{\n                        this.showAlertSelect();\n                    }\n                    break;\n                }\n                case 1:{\n                    let valTitle = this.exam.title.length>0;\n                    let valDuration = this.exam.duration.length>0;\n                    let valIndications = this.exam.indications.length>=20;\n                    let valCourse = this.exam.course.length>0;\n                    if (valTitle && valDuration && valIndications && valCourse){\n                        this.$bvModal.show('examSubmitModal');\n                    }else{\n                    if (!valIndications){\n                        this.showAlertIndicationsMissing();\n                    }if (!valDuration){\n                        this.showAlertDurationMissing();\n                    }if (!valTitle){\n                        this.showAlertTitleMissing();\n                    }if (!valCourse){\n                        this.showAlertCourseMissing();\n                    }\n                    }\n                    break;\n                }\n                default:\n                    this.tabIndex++;\n            }\n        },\n        updateScore(index, newScore){\n            this.problemsSelected[index].points = newScore;\n            this.problemsSelected[index].scoreInteger = newScore;\n        },\n        selectProblem (index) {\n\n            if (this.problemsSelected.length < this.maxNumberProblems){\n                this.problemsSelected.push (this.problemList[index])\n                this.problemList.splice(index, 1)\n            } else{\n                this.richMaximunProblem = true;\n            }\n        },\n        deselectProblem (index) {\n            this.problemList.push (this.problemsSelected[index])\n            this.problemsSelected.splice(index, 1)\n        },\n        countDownChanged(dismissCountDown) {\n                this.dismissCountDown = dismissCountDown\n        },\n        showAlertSelect() {\n            this.dismissCountDownSelect = this.dismissSecs\n        },\n        showAlertTitleMissing() {\n            this.dismissCountDownTitle = this.dismissSecs\n        },\n        showAlertIndicationsMissing() {\n            this.dismissCountDownIndications = this.dismissSecs\n        },\n        showAlertDurationMissing() {\n            this.dismissCountDownDuration = this.dismissSecs\n        },\n        showAlertCourseMissing() {\n            this.dismissCountDownCourse = this.dismissSecs\n        },\n    },\n    validations: {\n    exam: {\n        title: {\n            required\n        },\n        indications: {\n            required,\n            minLength: minLength(20)\n        },\n        duration: {\n            required\n        },\n        course: {\n            required\n        }\n\n        }\n    },\n}\n</script>\n\n<style>\n  .disabledTab{\n      pointer-events: none;\n  }\n</style>\n\n\n"]}]}