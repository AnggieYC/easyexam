{"remainingRequest":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/src/components/Problem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/src/components/Problem.vue","mtime":1574864847662},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/anggie/easy-exam-grupo-ii/Implementation/frontend/easyexam/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vaW1wb3J0IFRleFZpenVhbGl6ZXIgZnJvbSAiLi4vY29tcG9uZW50cy9UZXhWaXp1YWxpemVyIjsKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JwppbXBvcnQgTXVsdGlzZWxlY3QgZnJvbSAidnVlLW11bHRpc2VsZWN0IgppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiCmltcG9ydCB7IHZhbGlkYXRpb25NaXhpbiB9IGZyb20gJ3Z1ZWxpZGF0ZScKaW1wb3J0IHsgbWluTGVuZ3RoLCByZXF1aXJlZCB9IGZyb20gJ3Z1ZWxpZGF0ZS9saWIvdmFsaWRhdG9ycycKaW1wb3J0IHsgcGFyc2UsIEh0bWxHZW5lcmF0b3IgfSBmcm9tICdsYXRleC5qcycKaW1wb3J0IGthdGV4IGZyb20gJ2thdGV4JzsKaW1wb3J0ICdrYXRleC9kaXN0L2thdGV4Lm1pbi5jc3MnOwpleHBvcnQgZGVmYXVsdCB7CiAgICBtaXhpbnM6IFt2YWxpZGF0aW9uTWl4aW5dLAogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBkaXNtaXNzU2VjczogNSwKICAgICAgICAgICAgZGlzbWlzc0NvdW50RG93bkJvZHk6IDAsCiAgICAgICAgICAgIGRpc21pc3NDb3VudERvd25UYWdzOiAwLAogICAgICAgICAgICBkaXNtaXNzQ291bnREb3duVGl0bGU6IDAsCiAgICAgICAgICAgIHRhZ3M6IFtdLAogICAgICAgICAgICBpbnB1dF90eXBlczogWwogICAgICAgICAgICAgICAge2lkOiAxLCBuYW1lOiAiUmljaCBUZXh0In0sCiAgICAgICAgICAgICAgICB7aWQ6IDIsIG5hbWU6ICJMYXRleCJ9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIGlucHV0X3R5cGU6ICcnLAogICAgICAgICAgICBwcm9ibGVtX2h0bWw6ICcnLAogICAgICAgICAgICB0ZXN0OiAnJwogICAgICAgIH0KICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIHdpbmRvdy5rYXRleCA9IGthdGV4OwogICAgICAgIGNvbnN0IHRhZyA9IGF4aW9zLmdldCgiaHR0cDovL2xvY2FsaG9zdDo5ODk4L3RvcGljcy92MS90b3BpY3MvZ2V0VG9waWNzIik7CiAgICAgICAgdGFnLnRoZW4ocmVzcG9uc2UgPT4gKHRoaXMudGFncyA9IHJlc3BvbnNlLmRhdGEpKTsKICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICAgIC4uLm1hcFN0YXRlICh7CiAgICAgICAgICAgIHByb2JsZW06IHN0YXRlID0+IHN0YXRlLnN1Ym1pdC5mb3JtLnByb2JsZW0sCiAgICAgICAgICAgIGN1c3RvbVRvb2xiYXI6IHN0YXRlID0+IHN0YXRlLnN1Ym1pdC5lZGl0b3IKICAgICAgICB9KSwKICAgICAgICB2YWxpZGF0SW1nKCkgewogICAgICAgICAgICByZXR1cm4gKEJvb2xlYW4odGhpcy5wcm9ibGVtLmltYWdlKT09dHJ1ZT8gdHJ1ZTogbnVsbCkKICAgICAgICB9LAogICAgfSwKICAgIG1ldGhvZHM6IHsKICAgICAgICBjb3VudERvd25DaGFuZ2VkKGRpc21pc3NDb3VudERvd24pIHsKICAgICAgICAgICAgdGhpcy5kaXNtaXNzQ291bnREb3duID0gZGlzbWlzc0NvdW50RG93bgogICAgICAgIH0sCiAgICAgICAgc2hvd0FsZXJ0Qm9keSgpIHsKICAgICAgICAgICAgdGhpcy5kaXNtaXNzQ291bnREb3duQm9keSA9IHRoaXMuZGlzbWlzc1NlY3MKICAgICAgICB9LAogICAgICAgIHNob3dBbGVydFRhZ3MoKSB7CiAgICAgICAgICAgIHRoaXMuZGlzbWlzc0NvdW50RG93blRhZ3MgPSB0aGlzLmRpc21pc3NTZWNzCiAgICAgICAgfSwKICAgICAgICBzaG93QWxlcnRUaXRsZSgpIHsKICAgICAgICAgICAgdGhpcy5kaXNtaXNzQ291bnREb3duVGl0bGUgPSB0aGlzLmRpc21pc3NTZWNzCiAgICAgICAgfSwKICAgICAgICBnb05leHQoKSB7CiAgICAgICAgICAgIGxldCB2YWxUaXRsZSA9IHRoaXMucHJvYmxlbS50aXRsZS5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgICAgICBsZXQgdmFsQm9keSA9IHRoaXMucHJvYmxlbS5ib2R5Lmxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgICAgIGxldCB2YWxUYWdzID0gdGhpcy5wcm9ibGVtLnRvcGljc19pZC5sZW5ndGggPiAwID8gdHJ1ZTogZmFsc2U7CiAgICAgICAgICAgIGlmICh2YWxCb2R5ICYmIHZhbFRpdGxlICYmIHZhbFRhZ3MpewogICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd1cGRhdGVWaWV3TmV4dCcpCiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgaWYgKCF2YWxUYWdzKQogICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0FsZXJ0VGFncygpOwogICAgICAgICAgICAgICAgaWYgKCF2YWxCb2R5KSAKICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dBbGVydEJvZHkoKTsKICAgICAgICAgICAgICAgIGlmICghdmFsVGl0bGUpCiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93QWxlcnRUaXRsZSgpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBvblJlc2V0IChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIHRoaXMucHJvYmxlbS50aXRsZSA9ICcnOwogICAgICAgICAgICB0aGlzLnByb2JsZW0uYm9keSA9ICcnOwogICAgICAgICAgICB0aGlzLnByb2JsZW0uaW1hZ2UgPSBudWxsOwogICAgICAgICAgICB0aGlzLnByb2JsZW0udG9waWNzX2lkID0gW10KICAgICAgICB9LAogICAgICAgIHVwbG9hZEltYWdlIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwKICAgICAgICB2aXN1YWxpemUoKXsKICAgICAgICAgICAgCiAgICAgICAgICAgY29uc3QgcHJvYiA9IGF4aW9zLnBvc3QoJ2h0dHA6Ly8nICsgdGhpcy4kc3RvcmUuc3RhdGUuY2xpZW50VVJMICsnL3Byb2JsZW0vdjEvcHJvYmxlbS9sYXRleFRvSHRtbGJ5Qm9keScsewogICAgICAgICAgICAgICAgYm9keTogdGhpcy5wcm9ibGVtLmJvZHkKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHByb2IudGhlbihyZXNwb25zZSA9PiAodGhpcy50ZXN0ID0gcmVzcG9uc2UuZGF0YSkpOwogICAgICAgICAgICAKICAgICAgICAgICAgbGV0IGdlbmVyYXRvciA9IG5ldyBIdG1sR2VuZXJhdG9yKHsgaHlwaGVuYXRlOiBmYWxzZSB9KQogICAgICAgICAgICBsZXQgZG9jID0gcGFyc2UodGhpcy5wcm9ibGVtLmJvZHksIHsgZ2VuZXJhdG9yOiBnZW5lcmF0b3IgfSkKICAgICAgICAgICAgdGhpcy5wcm9ibGVtX2h0bWwgPSBkb2MuaHRtbERvY3VtZW50KCkuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTAogICAgICAgICAgICAKICAgICAgICB9CgogICAgfSwKICAgIGNvbXBvbmVudHM6IHsKICAgICAgICBNdWx0aXNlbGVjdCwKICAgICAgICAvL1RleFZpenVhbGl6ZXIKICAgIH0sCiAgICB2YWxpZGF0aW9uczogewogICAgICAgIHByb2JsZW06IHsKICAgICAgICAgICAgdGl0bGU6IHsKICAgICAgICAgICAgICAgIHJlcXVpcmVkLAogICAgICAgICAgICAgICAgbWluTGVuZ3RoOiBtaW5MZW5ndGgoMSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgcmVxdWlyZWQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG9waWNzX2lkOiB7CiAgICAgICAgICAgICAgICByZXF1aXJlZAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["Problem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Problem.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container md-6 align-center mt-2\">\n        <b-card-group deck>\n        <b-card>\n            <b-container >\n                <h1>Submit a Problem!</h1>\n                     <font color=\"red\"> <small>Required *</small> </font> \n                        <b-form @reset=\"onReset\">\n                            <b-form-group id=\"input-group-2\" label=\"Problem Title: *\">\n                                <b-form-input\n                                        id=\"input-1\"\n                                        v-model=\"$v.problem.title.$model\"\n                                        type=\"text\"\n                                        :state= \"$v.problem.title.$dirty ? !$v.problem.title.$error : null\"\n                                        required\n                                        placeholder=\"Please enter your problem title here\"\n                                        aria-describedby=\"input-1-live-feedback\"\n                                ></b-form-input>\n                                <b-form-invalid-feedback id=\"input-1-live-feedback\">\n                                    You must need to have a problem title.\n                                </b-form-invalid-feedback>\n                                <b-alert \n                                        :show=\"dismissCountDownTitle\" \n                                        dismissible \n                                        variant=\"danger\"  \n                                        @dismissed=\"dismissCountDownTitle=0\"\n                                        @dismiss-count-down=\"countDownChanged\" \n                                        >\n                                        You need to enter a title.\n                                </b-alert>\n                            </b-form-group>\n                                                            \n                            <b-form-group label=\"Problem Body: *\">\n                                <b-form-textarea\n                                id=\"textarea\"\n                                v-model=\"$v.problem.body.$model\"\n                                :state= \"$v.problem.body.$dirty ? !$v.problem.body.$error : null\"\n                                required\n                                placeholder=\"Please enter your problem body here in latex...\"\n                                rows=\"6\"\n                                max-rows=\"12\"\n                                ></b-form-textarea>\n                            <b-form-invalid-feedback id=\"input-2-live-feedback\">\n                                    You must need to enter a problem body.\n                            </b-form-invalid-feedback>\n                            <b-alert \n                                        :show=\"dismissCountDownBody\" \n                                        dismissible \n                                        variant=\"danger\"  \n                                        @dismissed=\"dismissCountDownBody=0\"\n                                        @dismiss-count-down=\"countDownChanged\" \n                                        >\n                                        You must need to have a problem body.\n                                </b-alert>\n                            </b-form-group>\n                           \n                            <b-form-group label=\"Tags: *\">\n                                <multiselect\n                                        v-model=\"$v.problem.topics_id.$model\"\n                                        :state= \"$v.problem.topics_id.$dirty ? !$v.problem.topics_id.$error : null\"\n                                        placeholder=\"Search a tag\"\n                                        label=\"name\"\n                                        track-by=\"id\"\n                                        :options=\"tags\"\n                                        :multiple=\"true\"\n                                        :hide-selected=\"true\"\n                                >\n                                </multiselect>\n                                <b-form-invalid-feedback id=\"input-3-live-feedback\">\n                                        You must need to select at lest one tag.\n                                </b-form-invalid-feedback>\n                                <b-alert \n                                        :show=\"dismissCountDownTags\" \n                                        dismissible \n                                        variant=\"danger\"  \n                                        @dismissed=\"dismissCountDownTags=0\"\n                                        @dismiss-count-down=\"countDownChanged\" \n                                        >\n                                        You need to select at least one tag.\n                                </b-alert>\n                            </b-form-group>\n                            <!-- Inser a image -->\n                            <!-- \n                             <b-form-group id = \"input-group-img\" label=\"Select an image: \">\n                                <b-form-file\n                                        v-model=\"problem.image\"\n                                        :state=\"validatImg\"\n                                        placeholder=\"Choose an image (.jpeg, .png, .gif) or drop it here...\"\n                                        drop-placeholder=\"Drop image here...\"\n                                        accept=\"image/jpeg, image/png, image/gif\"\n                                ></b-form-file>\n                            </b-form-group>\n                            -->\n                            <b-button type=\"reset\" variant=\"light\"><i class=\"fas fa-trash fa-1x\" style=\"color:  #e31d1d;\"></i></b-button>\n                            <b-button variant=\"light\" class=\"mx-1 float-right \" @click=\"goNext\"><i class=\"fas fa-angle-double-right fa-1x\" style=\"color:  #2f3135 ;\"></i></b-button>\n                            <b-button variant=\"light\" class=\"mx-1 float-right \" @click=\"visualize\"><i class=\"fas fa-play-circle\"></i></b-button>\n                        </b-form>\n\n                      \n            </b-container>\n        </b-card>\n            <b-card>\n                <h1>Preview</h1>\n                <h3> {{problem.title}} </h3>\n               \n\n                <b-card-body v-html=\"problem_html\">\n                </b-card-body>\n                \n                <!--\n                <b-card-body v-html=\"problem_html\">\n                </b-card-body>\n                -->\n                \n            </b-card>\n        </b-card-group>\n\n        \n    </div>\n</template>\n<script>\n    //import TexVizualizer from \"../components/TexVizualizer\";\n    import { mapState } from 'vuex'\n    import Multiselect from \"vue-multiselect\"\n    import axios from \"axios\"\n    import { validationMixin } from 'vuelidate'\n    import { minLength, required } from 'vuelidate/lib/validators'\n    import { parse, HtmlGenerator } from 'latex.js'\n    import katex from 'katex';\n    import 'katex/dist/katex.min.css';\n    export default {\n        mixins: [validationMixin],\n        data() {\n            return {\n                dismissSecs: 5,\n                dismissCountDownBody: 0,\n                dismissCountDownTags: 0,\n                dismissCountDownTitle: 0,\n                tags: [],\n                input_types: [\n                    {id: 1, name: \"Rich Text\"},\n                    {id: 2, name: \"Latex\"}\n                ],\n                input_type: '',\n                problem_html: '',\n                test: ''\n            }\n        },\n        mounted() {\n            window.katex = katex;\n            const tag = axios.get(\"http://localhost:9898/topics/v1/topics/getTopics\");\n            tag.then(response => (this.tags = response.data));\n        },\n        computed: {\n            ...mapState ({\n                problem: state => state.submit.form.problem,\n                customToolbar: state => state.submit.editor\n            }),\n            validatImg() {\n                return (Boolean(this.problem.image)==true? true: null)\n            },\n        },\n        methods: {\n            countDownChanged(dismissCountDown) {\n                this.dismissCountDown = dismissCountDown\n            },\n            showAlertBody() {\n                this.dismissCountDownBody = this.dismissSecs\n            },\n            showAlertTags() {\n                this.dismissCountDownTags = this.dismissSecs\n            },\n            showAlertTitle() {\n                this.dismissCountDownTitle = this.dismissSecs\n            },\n            goNext() {\n                let valTitle = this.problem.title.length > 0 ? true : false;\n                let valBody = this.problem.body.length > 0 ? true : false;\n                let valTags = this.problem.topics_id.length > 0 ? true: false;\n                if (valBody && valTitle && valTags){\n                    this.$store.commit('updateViewNext')\n                }else{\n                    if (!valTags)\n                        this.showAlertTags();\n                    if (!valBody) \n                        this.showAlertBody();\n                    if (!valTitle)\n                        this.showAlertTitle();\n                }\n            },\n            onReset (evt) {\n                evt.preventDefault();\n                this.problem.title = '';\n                this.problem.body = '';\n                this.problem.image = null;\n                this.problem.topics_id = []\n            },\n            uploadImage (evt) {\n                evt.preventDefault();\n            },\n            visualize(){\n                \n               const prob = axios.post('http://' + this.$store.state.clientURL +'/problem/v1/problem/latexToHtmlbyBody',{\n                    body: this.problem.body\n                });\n                prob.then(response => (this.test = response.data));\n                \n                let generator = new HtmlGenerator({ hyphenate: false })\n                let doc = parse(this.problem.body, { generator: generator })\n                this.problem_html = doc.htmlDocument().documentElement.outerHTML\n                \n            }\n\n        },\n        components: {\n            Multiselect,\n            //TexVizualizer\n        },\n        validations: {\n            problem: {\n                title: {\n                    required,\n                    minLength: minLength(1)\n                },\n                body: {\n                    required\n                },\n                topics_id: {\n                    required\n                }\n            }\n        }\n    }\n</script>\n<style src=\"../static/css/vue-multiselect/vue-multiselect.min.css\"></style>\n\n"]}]}