#!/usr/bin/env node
var util, path, fs, stdin, program, beautifyHtml, ref$, he, parse, HtmlGenerator, en, de, info, addStyle, that, macros, CustomMacros, options, readFile, input, dir, css, fonts, js, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
global.window = require('svgdom');
global.document = window.document;
util = require('util');
path = require('path');
fs = require('fs-extra');
stdin = require('stdin');
program = require('commander');
beautifyHtml = require('js-beautify').html;
ref$ = require('../dist/latex.js'), he = ref$.he, parse = ref$.parse, HtmlGenerator = ref$.HtmlGenerator;
en = require('hyphenation.en-us');
de = require('hyphenation.de');
info = require('../package.json');
he.encode.options.strict = true;
he.encode.options.useNamedReferences = true;
addStyle = function(url, styles){
  if (!styles) {
    return [url];
  } else {
    return arrayFrom$(styles).concat([url]);
  }
};
program.name(info.name).version(info.version).description(info.description).usage('[options] [files...]').option('-o, --output <file>', 'specify output file, otherwise STDOUT will be used').option('-a, --assets [dir]', 'copy CSS and fonts to the directory of the output file, unless dir is given (default: no assets are copied)').option('-u, --url <base URL>', 'set the base URL to use for the assets (default: use relative URLs)').option('-b, --body', 'don\'t include HTML boilerplate and CSS, only output the contents of body').option('-e, --entities', 'encode HTML entities in the output instead of using UTF-8 characters').option('-p, --pretty', 'beautify the html (this may add/remove spaces unintentionally)').option('-c, --class <class>', 'set a default documentclass for documents without a preamble', 'article').option('-m, --macros <file>', 'load a JavaScript file with additional custom macros').option('-s, --stylesheet <url>', 'specify an additional style sheet to use (can be repeated)', addStyle).option('-n, --no-hyphenation', 'don\'t insert soft hyphens (disables automatic hyphenation in the browser)').option('-l, --language <lang>', 'set hyphenation language', 'en').on('--help', function(){
  return console.log('\nIf no input files are given, STDIN is read.');
}).parse(process.argv);
if (that = program.macros) {
  macros = path.resolve(process.cwd(), that);
  CustomMacros = require(macros);
  if (that = CustomMacros['default']) {
    CustomMacros = that;
  } else {
    CustomMacros = CustomMacros[path.parse(macros).name];
  }
}
if (program.body && (program.stylesheet || program.url)) {
  console.error("error: conflicting options: 'url' and 'stylesheet' cannot be used with 'body'!");
  process.exit(1);
}
options = {
  hyphenate: program.hyphenation,
  languagePatterns: (function(){
    switch (that = program.language) {
    case 'en':
      return en;
    case 'de':
      return de;
    default:
      console.error("error: language '" + that + "' is not supported yet");
      return process.exit(1);
    }
  }()),
  documentClass: program['class'],
  CustomMacros: CustomMacros,
  styles: program.style || []
};
readFile = util.promisify(fs.readFile);
if (program.args.length) {
  input = Promise.all(program.args.map(function(file){
    return readFile(file);
  }));
} else {
  input = new Promise(function(resolve, reject){
    stdin(function(str){
      resolve(str);
    });
  });
}
input.then(function(text){
  var generator, html;
  if (text.join) {
    text = text.join("\n\n");
  }
  generator = parse(text, {
    generator: new HtmlGenerator(options)
  });
  if (program.body) {
    html = generator.domFragment().outerHTML;
  } else {
    html = generator.htmlDocument(program.url).outerHTML;
  }
  if (program.entities) {
    html = he.encode(html, {
      'allowUnsafeSymbols': true
    });
  }
  if (program.pretty) {
    html = beautifyHtml(html, {
      'end_with_newline': true,
      'wrap_line_length': 120,
      'wrap_attributes': 'auto',
      'unformatted': ['span']
    });
  }
  if (program.output) {
    return fs.writeFileSync(program.output, html);
  } else {
    return process.stdout.write(html + '\n');
  }
})['catch'](function(err){
  console.error(err.toString());
  return process.exit(1);
});
dir = program.assets;
if (program.assets === true) {
  if (!program.output) {
    console.error("assets error: either a directory has to be given, or -o");
    process.exit(1);
  } else {
    dir = path.posix.dirname(path.resolve(program.output));
  }
} else if (fs.existsSync(dir) && !fs.statSync(dir).isDirectory()) {
  console.error("assets error: the given path exists but is not a directory: ", dir);
  process.exit(1);
}
if (dir) {
  css = path.join(dir, 'css');
  fonts = path.join(dir, 'fonts');
  js = path.join(dir, 'js');
  fs.mkdirpSync(css);
  fs.mkdirpSync(fonts);
  fs.mkdirpSync(js);
  fs.copySync(path.join(__dirname, '../dist/css'), css);
  fs.copySync(path.join(__dirname, '../dist/fonts'), fonts);
  fs.copySync(path.join(__dirname, '../dist/js'), js);
  fs.copySync(path.join(__dirname, '../node_modules/katex/dist/fonts/'), fonts, function(src){
    return /\.woff$/.exec(src) || fs.statSync(src).isDirectory();
  });
}
//# sourceMappingURL=data:application/json;base64,
